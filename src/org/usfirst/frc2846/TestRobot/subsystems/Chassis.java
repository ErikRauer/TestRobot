// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2846.TestRobot.subsystems;

import org.usfirst.frc2846.TestRobot.RobotMap;
import org.usfirst.frc2846.TestRobot.commands.*;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFront = RobotMap.chassisleftFront;
    private final CANTalon rightFront = RobotMap.chassisrightFront;
    private final CANTalon leftRear = RobotMap.chassisleftRear;
    private final CANTalon rightRear = RobotMap.chassisrightRear;
    private final RobotDrive robotDrive = RobotMap.chassisrobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void driveCommand(double strafe ,double forward, double rotation){
    	SmartDashboard.putNumber("Chassis.strafe", strafe);
    	SmartDashboard.putNumber("Chassis.forward", forward);
    	SmartDashboard.putNumber("Chassis.rotation", rotation);
    	robotDrive.mecanumDrive_Cartesian(strafe, forward, rotation, 0);
    }
}
//strafe right
//front right backwards
//back right forwards
//front left forwards
//back left backwards

//strafe left		
//front right forwards
//back right backwards
//front left backwards
//back left forwards
